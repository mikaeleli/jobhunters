# Generated by Django 4.2.11 on 2024-05-12 17:16
from django.db import migrations
from django.conf import settings
from django.contrib.auth.hashers import make_password

from faker import Faker
import urllib.request
import urllib.parse
import datetime
import random

fake = Faker()

tzdata = datetime.datetime.now().tzinfo

NUMBER_OF_COMPANIES = 15
NUMBER_OF_JOBS = 30
NUMBER_OF_USERS = 30
NUMBER_OF_APPLICATIONS = 90
MAX_NUMBER_OF_EXPERIENCE = 5
MAX_NUMBER_OF_RECOMMENDATIONS = 5

job_categories_and_roles = {
    "Software": ["Junior developer", "Senior developer", "Database engineer", "DevOps engineer"],
    "IT": ["Network administrator", "Windows domain administrator", "Database administrator",
           "Customer service specialist"],
    "Law": ["Lawyer", "Paralegal", "Apprentice"],
    "Medicine": ["Doctor", "Nurse", "Resident"],
    "Construction": ["Construction engineer", "Construction administrator", "Carpenter", "Machinery operator"],
    "Hospitality": ["Receptionist", "Concierge", "Housekeeper", "Chef", "Waiter"],
    "Agriculture": ["Farm worker", "Grower", "Crop manager", "Greenhouse manager"]
}


def create_companies(apps, schema_editor):
    """
    Create companies
    """
    LOGO_IMAGE_URL = "https://ui-avatars.com/api/?background=random&color=random&name="
    COVER_IMAGE_URL = "https://random.imagecdn.app/2048/1024"
    IMAGE_REQUEST_HEADERS = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36"}

    User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
    CompanyProfile = apps.get_model("job_hunters", "CompanyProfile")
    Image = apps.get_model("job_hunters", "Image")

    # create companies
    for _ in range(0, NUMBER_OF_COMPANIES):
        company_name = fake.company()
        email_address = fake.email()
        user = User.objects.create_user(
            username=email_address,
            email=email_address,
            password=make_password('1234', None)
        )

        profile_image_req = urllib.request.Request(COVER_IMAGE_URL, headers=IMAGE_REQUEST_HEADERS)
        profile_image_data = urllib.request.urlopen(profile_image_req).read()
        profile_image = Image.objects.create(
            image_data=profile_image_data,
        )
        logo_image_url = LOGO_IMAGE_URL + urllib.parse.quote_plus(company_name)
        logo_req = urllib.request.Request(logo_image_url, headers=IMAGE_REQUEST_HEADERS)
        logo_file = urllib.request.urlopen(logo_req)
        logo_image_data = logo_file.read()
        logo_image = Image.objects.create(
            image_data=logo_image_data,
        )
        company_bullets = ""
        for _ in range(0, 5):
            company_bullets += f"<li>{fake.bs()}</li>\n"

        company_description = f"<strong>{fake.catch_phrase()}</strong>\n\n<ul>\n{company_bullets}</ul>\n\n<p>{fake.paragraph(nb_sentences=20)}</p>\n\n<p>{fake.paragraph(nb_sentences=20)}</p>"
        CompanyProfile.objects.create(
            user=user,
            name=f'{company_name} {fake.company_suffix()}',
            address=f'{fake.address()} {fake.city()} {fake.country()}',
            webpage_url=f'{fake.url()}',
            logo_image=logo_image,
            cover_image=profile_image,
            description=company_description,
        )


def create_job_categories(apps, schema_editor):
    """
    Creates job_categories
    """

    Category = apps.get_model("job_hunters", "Category")

    for category in job_categories_and_roles.keys():
        Category.objects.create(name=category)


def create_jobs(apps, schema_editor):
    """
    Create job listings
    """
    Job = apps.get_model("job_hunters", "Job")
    Category = apps.get_model("job_hunters", "Category")
    CompanyProfile = apps.get_model("job_hunters", "CompanyProfile")

    # create job listings
    for _ in range(0, NUMBER_OF_JOBS):
        job_name = fake.job()
        job_description = f"<strong>{job_name} - {fake.catch_phrase()}</strong>\n\n"
        job_bullets = ""
        for _ in range(0, 5):
            job_bullets += f"<li>{fake.bs()}</li>\n"

        job_description += f"<ul>\n{job_bullets}</ul>\n\n"
        job_description += fake.paragraph(nb_sentences=20)
        job = Job.objects.create(
            title=job_name,
            description=job_description,
            due_date=fake.future_date(tzinfo=tzdata),
            starting_date=fake.future_date(tzinfo=tzdata),
            offered_by=random.choice(CompanyProfile.objects.all()),
            posted_date=fake.past_date(tzinfo=tzdata),
            is_part_time=bool(random.getrandbits(1)),
        )
        job.categories.set(random.choices(Category.objects.all(), k=random.randint(1, 3)))


def create_users(apps, schema_editor):
    """
    Create users
    """
    PROFILE_IMAGE_URL = "https://api.dicebear.com/8.x/pixel-art/png?seed="
    IMAGE_REQUEST_HEADERS = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36"}

    User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
    UserProfile = apps.get_model("job_hunters", "UserProfile")
    Image = apps.get_model("job_hunters", "Image")

    # create users
    for _ in range(0, NUMBER_OF_USERS):
        person_name = fake.name()
        email_address = fake.email()
        user = User.objects.create_user(
            username=email_address,
            email=email_address,
            password=make_password('1234', None),
        )

        profile_image_url = PROFILE_IMAGE_URL + urllib.parse.quote_plus(person_name)
        profile_image_req = urllib.request.Request(profile_image_url, headers=IMAGE_REQUEST_HEADERS)
        profile_image_file = urllib.request.urlopen(profile_image_req)
        profile_image_data = profile_image_file.read()
        profile_image = Image.objects.create(
            image_data=profile_image_data,
        )

        UserProfile.objects.create(
            user=user,
            full_name=person_name,
            profile_image=profile_image,
        )


def create_applications(apps, schema_editor):
    """
    Create applications
    """
    Application = apps.get_model("job_hunters", "Application")
    Job = apps.get_model("job_hunters", "Job")
    UserProfile = apps.get_model("job_hunters", "UserProfile")
    Experience = apps.get_model("job_hunters", "Experience")
    Recommendation = apps.get_model("job_hunters", "Recommendation")

    # create applications
    for _ in range(0, NUMBER_OF_APPLICATIONS):
        application_job = random.choice(Job.objects.all())
        application_user = random.choice(UserProfile.objects.all())

        application = Application.objects.create(
            job=application_job,
            applicant=application_user.user,
            full_name=application_user.full_name,
            cover_letter=fake.paragraph(nb_sentences=10),
            street_name=fake.street_name(),
            house_number=fake.building_number(),
            city=fake.city(),
            postal_code=fake.postalcode(),
            country=fake.country(),
            applied_at=fake.past_date(application_job.posted_date, tzinfo=tzdata),
            status=random.choice(["PENDING", "REJECTED", "ACCEPTED"]),
        )

        for _ in range(0, random.randint(0, MAX_NUMBER_OF_EXPERIENCE)):
            start_date = fake.past_date(tzinfo=tzdata)
            Experience.objects.create(
                application=application,
                role=fake.job(),
                workplace_name=fake.company(),
                start_date=start_date,
                end_date=fake.past_date(start_date=start_date, tzinfo=tzdata)
            )

        for _ in range(0, random.randint(0, MAX_NUMBER_OF_RECOMMENDATIONS)):
            Recommendation.objects.create(
                application=application,
                name=fake.name(),
                email=fake.email(),
                phone_number=fake.phone_number(),
                role=fake.job(),
                can_be_contacted=bool(random.getrandbits(1)),
            )


class Migration(migrations.Migration):
    dependencies = [
        ("job_hunters", "0010_application_status"),
    ]

    operations = [
        migrations.RunPython(create_companies),
        migrations.RunPython(create_job_categories),
        migrations.RunPython(create_jobs),
        migrations.RunPython(create_users),
        migrations.RunPython(create_applications)
    ]
